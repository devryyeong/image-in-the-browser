{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://image-in-the-browser/./src/utils/colors.js","webpack://image-in-the-browser/./src/utils/constant.js","webpack://image-in-the-browser/./src/House.js","webpack://image-in-the-browser/./src/Bear.js","webpack://image-in-the-browser/./src/Heart.js","webpack://image-in-the-browser/./src/Circle.js","webpack://image-in-the-browser/./src/index.js"],"sourcesContent":["const COLORS = {\n  RED: '#FA3E39',\n  ORANGE: '#F7BB05',\n  GREEN: '#93DD33',\n  PINK: '#FB8EAA',\n  NAVY: '#3314C2',\n  BROWN: '#FA7515',\n  WHITE: '#FFFFFF',\n};\n\nexport default COLORS;","// 캔버스\nconst CANVAS_WIDTH = 1440;\nconst CANVAS_HEIGHT = 600;\n\n// 집\nexport const HOUSE_WIDTH = 200;\nexport const HOUSE_HEIGHT = 150;\n\n// 풍선 끈이 묶여있는 집의 중심 좌표\nexport const HOUSE_CENTER = {\n  x: CANVAS_WIDTH / 2,\n  y: CANVAS_HEIGHT -150,\n};\n\n// 하트 모양 풍선의 중심\nexport const HEART_RADIUS = 75;","import { HOUSE_WIDTH, HOUSE_HEIGHT } from './utils/constant';\n\nfunction drawWindow (context, x, y) {\n  context.fillStyle = '#FFFF00';\n  context.fillRect(x + 10, y + 10, 30, 30);\n}\n\nfunction drawHouse (context, x, y) {\n  context.beginPath();\n  context.fillStyle = '#3C3C3C';\n  context.fillRect(x, y, HOUSE_WIDTH, HOUSE_HEIGHT);\n\n  // 창문 그리기\n  const windowWidth = 20;\n  const windowHeight = 20;\n  const windowPadding = 20;\n\n  // 1행에 3개의 창문 그리기\n  for (let i = 0; i < 3; i++) {\n    const windowX = x + windowPadding + i * ((200 - windowWidth) / 5 + windowPadding);\n    const windowY = y + windowPadding;\n    drawWindow(context, windowX, windowY);\n  }\n\n  for (let i = 0; i < 3; i++) {\n    const windowX = x + windowPadding + i * ((200 - windowWidth) / 5 + windowPadding);\n    const windowY = y + windowPadding;\n    drawWindow(context, windowX, windowY + windowHeight + windowPadding);\n  }\n};\n\nexport default drawHouse;","import COLORS from './utils/colors';\nimport { HOUSE_CENTER } from './utils/constant';\n\nfunction drawBear (x, y) {\n  const canvas = document.getElementById('canvas');\n  const context = canvas.getContext('2d');\n\n  const centerX = x + 150;\n  const centerY = y + 200;\n\n  // 얼굴\n  context.beginPath();\n  context.arc(x + 150, y + 150, 50, 0, Math.PI * 2);\n  context.fillStyle = `${COLORS.BROWN}`;\n  context.fill();\n  context.closePath();\n\n  // 눈\n  context.beginPath();\n  context.arc(x + 130, y + 130, 5, 0, Math.PI * 2);\n  context.fillStyle = '#000000';\n  context.fill();\n  context.closePath();\n\n  context.beginPath();\n  context.arc(x + 170, y + 130, 5, 0, Math.PI * 2);\n  context.fillStyle = '#000000';\n  context.fill();\n  context.closePath();\n\n  // 코\n  context.beginPath();\n  context.arc(x + 150, y + 150, 5, 0, Math.PI * 2);\n  context.fillStyle = '#000000';\n  context.fill();\n  context.closePath();\n\n  // 입\n  context.beginPath();\n  context.arc(x + 150, y + 155, 20, 0.2 * Math.PI, 0.8 * Math.PI);\n  context.strokeStyle = '#000000';\n  context.lineWidth = 3;\n  context.stroke();\n  context.closePath();\n\n  // 끈\n  context.beginPath();\n  context.moveTo(centerX, centerY);\n  context.lineTo(HOUSE_CENTER.x, HOUSE_CENTER.y);\n  context.strokeStyle = 'black';\n  context.stroke();\n  context.closePath();\n};\nexport default drawBear;\n","import { HOUSE_CENTER } from './utils/constant';\n\nfunction drawHeart (x, y) {\n  const canvas = document.getElementById('canvas');\n  const context = canvas.getContext('2d');\n\n  const centerX = x + 75;\n  const centerY = y + 120;\n\n  context.save(); // 현재 상태 저장\n  context.translate(x, y); // 원점 이동\n\n  context.beginPath();\n  context.moveTo(75, 40);\n  context.bezierCurveTo(75, 37, 70, 25, 50, 25);\n  context.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);\n  context.bezierCurveTo(20, 80, 40, 102, 75, 120);\n  context.bezierCurveTo(110, 102, 130, 80, 130, 62.5);\n  context.bezierCurveTo(130, 62.5, 130, 25, 100, 25);\n  context.bezierCurveTo(85, 25, 75, 37, 75, 40);\n  context.fill();\n  context.closePath();\n  context.restore(); // 상태 복원\n\n  // 끈\n  context.beginPath();\n  context.moveTo(centerX, centerY);\n  context.lineTo(HOUSE_CENTER.x, HOUSE_CENTER.y);\n  context.strokeStyle = '#000000';\n  context.stroke();\n  context.closePath();\n};\n\nexport default drawHeart;\n","import { HOUSE_CENTER } from \"./utils/constant\";\n\nfunction drawCircle (x, y) {\n  const canvas = document.getElementById('canvas');\n  const context = canvas.getContext('2d');\n\n  const centerX = x;\n  const centerY = y + 50;\n\n  context.beginPath();\n  context.arc(x, y, 50, 0, Math.PI * 2);\n  context.fill();\n  context.closePath();\n\n  // 끈\n  context.beginPath();\n  context.moveTo(centerX, centerY);\n  context.lineTo(HOUSE_CENTER.x, HOUSE_CENTER.y);\n  context.strokeStyle = 'black';\n  context.stroke();\n  context.closePath();\n};\n\nexport default drawCircle;","import './css/index.css';\nimport COLORS from './utils/colors';\nimport drawHouse from './House';\nimport drawBear from './Bear';\nimport drawHeart from './Heart';\nimport drawCircle from './Circle';\nimport { HOUSE_WIDTH, HOUSE_HEIGHT, HEART_RADIUS } from './utils/constant';\n\nconst canvas = document.getElementById('canvas');\nconst context = canvas.getContext('2d');\nconst ballons = []; // 추가한 풍선들을 저장하는 배열\n\n// 랜덤 색상 선택 함수\nfunction getRandomColor() {\n  const colorKeys = Object.keys(COLORS);\n  const randomColorKey = colorKeys[Math.floor(Math.random() * colorKeys.length)];\n  return COLORS[randomColorKey];\n}\n\n// 랜덤 도형 추가 함수\nfunction addRandomShape(x, y) {\n  const shapeTypes = ['circle', 'heart', 'bear'];\n  const randomShapeIndex = Math.floor(Math.random() * shapeTypes.length);\n\n  const shapeType = shapeTypes[randomShapeIndex];\n  const shapeColor = shapeType === 'bear' ? `${COLORS.BROWN}` : getRandomColor();\n\n  if (shapeType === 'circle') {\n    drawCircle(x, y);\n  } else if (shapeType === 'heart') {\n    drawHeart(x, y);\n  } else if (shapeType === 'bear') {\n    drawBear(x, y);\n  }\n\n  context.fillStyle = shapeColor;\n  context.fill();\n  context.closePath();\n\n  ballons.push({\n    type: shapeType,\n    x,\n    y,\n    color: shapeColor,\n  });\n}\n\n// 클릭한 좌표가 원 내부에 있는지 확인하는 함수\nfunction isPointInsideCircle(pointX, pointY, circle) {\n  const distance = Math.sqrt((pointX - circle.x) ** 2 + (pointY - circle.y) ** 2);\n  return distance <= 50;\n}\n\n// 클릭한 좌표가 하트 내부에 있는지 확인하는 함수\nfunction isPointInsideHeart(pointX, pointY, heartX, heartY) {\n  const heartCenterX = heartX + HEART_RADIUS;\n  const heartCenterY = heartY + HEART_RADIUS;\n\n  // 하트 내부에 있는지 여부를 판단 (하트 내부에 있는 좌표들을 반복해서 확인하고 있는지 확인)\n  for (let yOffset = -HEART_RADIUS; yOffset <= HEART_RADIUS; yOffset++) {\n    const xOffset = HEART_RADIUS - Math.abs(yOffset); // 각 행에서의 x 범위\n    const xStart = heartCenterX - xOffset;\n    const xEnd = heartCenterX + xOffset;\n\n    // 클릭 좌표가 해당 행에 속하면 내부에 있는 것으로 판단\n    if (Math.abs(pointY - (heartCenterY + yOffset)) <= 1 && pointX >= xStart && pointX <= xEnd) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// 클릭한 좌표가 곰 내부에 있는지 확인하는 함수\nfunction isPointInsideBear(pointX, pointY, bearX, bearY) {\n  const bearCenterX = bearX + 150;\n  const bearCenterY = bearY + 150;\n  const faceRadius = 50;\n\n  // 곰 얼굴 내부에 있는지 여부를 판단\n  const distance = Math.sqrt((pointX - bearCenterX) ** 2 + (pointY - bearCenterY) ** 2);\n  return distance <= faceRadius;\n}\n\n// 클릭한 좌표가 도형 내부에 있는지 확인하는 함수\nfunction isPointInsideShape(pointX, pointY, shape) {\n  if (shape.type === 'circle') {\n    return isPointInsideCircle(pointX, pointY, shape);\n  }\n  if (shape.type === 'heart') {\n    return isPointInsideHeart(pointX, pointY, shape.x, shape.y);\n  }\n  if (shape.type === 'bear') {\n    return isPointInsideBear(pointX, pointY, shape.x, shape.y);\n  }\n  return false;\n}\n\n// 캔버스 다시 그리기 함수\nfunction redrawCanvas() {\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  drawHouse(context, 620, 450);\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const ballon of ballons) {\n    switch (ballon.type) {\n      case 'circle':\n        drawCircle(ballon.x, ballon.y);\n        break;\n      case 'heart':\n        drawHeart(ballon.x, ballon.y);\n        break;\n      case 'bear':\n        drawBear(ballon.x, ballon.y);\n        break;\n      default:\n        break;\n    }\n    context.fillStyle = ballon.color;\n    context.fill();\n    context.closePath();\n  }\n}\n\n// 집 영역인지 확인하는 함수\nfunction isPointInHouse(pointX, pointY) {\n  const houseX = (canvas.width - HOUSE_WIDTH) / 2;\n  const houseY = canvas.height - HOUSE_HEIGHT;\n  const houseLeft = houseX;\n  const houseTop = houseY;\n\n  // 집 영역 내인지 체크\n  if (\n    pointX >= houseLeft &&\n    pointX <= houseLeft + HOUSE_WIDTH &&\n    pointY >= houseTop &&\n    pointY <= houseTop + HOUSE_HEIGHT\n  ) {\n    return true;\n  }\n  return false;\n}\n\n// 원, 하트, 곰 도형 클릭 시 실행될 함수\nfunction handleShapeClick(clickX, clickY) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const ballon of ballons) {\n    if (isPointInsideShape(clickX, clickY, ballon)) {\n      ballon.type = null;\n      break;\n    }\n  }\n  redrawCanvas();\n}\n\n// 특정값 사이의 랜덤 좌표 생성 함수\nfunction getRandomPointInRange(minX, maxX, minY, maxY) {\n  const randomX = Math.random() * (maxX - minX) + minX;\n  const randomY = Math.random() * (maxY - minY) + minY;\n  return { x: randomX, y: randomY };\n}\n\n// 클릭 이벤트 리스너 등록\ncanvas.addEventListener('click', (event) => {\n  const clickX = event.offsetX;\n  const clickY = event.offsetY;\n  let clickedShape = null;\n\n  // 클릭한 좌표가 어떤 도형 위에 있는지 확인\n  // eslint-disable-next-line no-restricted-syntax\n  for (const ballon of ballons) {\n    if (isPointInsideShape(clickX, clickY, ballon)) {\n      clickedShape = ballon.type;\n      break;\n    }\n  }\n\n  if (clickedShape) {\n    handleShapeClick(clickX, clickY);\n  } else if (isPointInHouse(clickX, clickY)) {\n    const randomPoint = getRandomPointInRange(100, 1340, 50, 150);\n    addRandomShape(randomPoint.x, randomPoint.y);\n  }\n});\ndrawHouse(context, canvas.width / 2 - HOUSE_WIDTH / 2, canvas.height - HOUSE_HEIGHT);\n\n\n// 구름 그리기 함수\n// function drawCloud(x, y, width, height) {\n//   context.beginPath();\n//   context.arc(x + width * 0.25, y + height * 0.5, width * 0.25, 0, Math.PI * 2);\n//   context.arc(x + width * 0.5, y + height * 0.4, width * 0.3, 0, Math.PI * 2);\n//   context.arc(x + width * 0.75, y + height * 0.5, width * 0.25, 0, Math.PI * 2);\n//   context.closePath();\n\n//   context.fillStyle = 'white';\n//   context.fill();\n// }\n\n// // 구름 초기 좌표와 속도 설정\n// let cloudX = canvas.width - 200;\n// const cloudY = canvas.height - 550;\n// const cloudWidth = 150;\n// const cloudHeight = 80;\n// const cloudSpeed = 2;\n\n\n// // 캔버스 다시 그리기 함수\n// function redrawCanvasWithAnimation() {\n//   context.clearRect(0, 0, canvas.width, canvas.height);\n//   // 집 그리기\n//   drawHouse(context, 620, 450);\n//   // 구름 그리기\n//   drawCloud(cloudX, cloudY, cloudWidth, cloudHeight);\n// }\n// // 구름 움직임 로직\n// function updateCloudPosition() {\n//   cloudX -= cloudSpeed;\n//   if (cloudX + cloudWidth < 0) {\n//     cloudX = canvas.width;\n//   }\n// }\n\n// // 애니메이션 설정\n// function animate() {\n//   updateCloudPosition();\n//   redrawCanvasWithAnimation();\n\n//   // 다음 프레임 요청\n//   requestAnimationFrame(animate);\n// }\n// animate();"],"names":["RED","ORANGE","GREEN","PINK","NAVY","BROWN","WHITE","HOUSE_HEIGHT","HOUSE_CENTER","CANVAS_WIDTH","CANVAS_HEIGHT","HEART_RADIUS","drawWindow","context","x","y","fillStyle","fillRect","beginPath","i","document","getElementById","getContext","centerX","centerY","arc","Math","PI","COLORS","fill","closePath","strokeStyle","lineWidth","stroke","moveTo","lineTo","save","translate","bezierCurveTo","restore","canvas","ballons","isPointInsideShape","pointX","pointY","shape","type","circle","sqrt","isPointInsideCircle","heartX","heartY","heartCenterX","heartCenterY","yOffset","xOffset","abs","xStart","xEnd","isPointInsideHeart","bearX","bearY","bearCenterX","bearCenterY","isPointInsideBear","addEventListener","event","clickX","offsetX","clickY","offsetY","clickedShape","ballon","clearRect","width","height","drawHouse","drawCircle","drawHeart","drawBear","color","redrawCanvas","handleShapeClick","houseX","houseY","isPointInHouse","randomPoint","random","shapeTypes","shapeType","floor","length","shapeColor","colorKeys","Object","keys","randomColorKey","getRandomColor","push","addRandomShape","HOUSE_WIDTH"],"sourceRoot":""}